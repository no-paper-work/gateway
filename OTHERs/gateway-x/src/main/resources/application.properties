spring.application.name=gateway
spring.profiles.active=default
spring.cloud.config.enabled=false
spring.cloud.config.import-check.enabled=false
spring.config.import=optional:configserver:http://localhost:8888/configurations/


gateway.msg=API Gateway - MicroService for ShareHelpers
gateway.build-version=v1

server.port=8080

logging.level.org.springframework = debug

## COMMON API PARAM
v1API=/api/v1

## EUREKA
eureka.instance.preferIpAddress = true 
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true

eureka.client.serviceUrl.defaultZone=http://localhost:8761/service-registry/eureka/

# Configuring Info End Point
management.info.env.enabled = true

info.app.name = gateway
info.app.description = API Gateway for all applications
info.app.version = 1.0.0

endpoints.shutdown.enabled=true
management.endpoint.shutdown.enabled=true
management.endpoint.web.exposure.include = *
management.endpoint.gateway.enabled=true

# ## Mongo DB
spring.data.mongodb.uri=mongodb+srv://admin:RR9v5V5j5AjaBQRL@metis-nopaper-gateway-c.ib1dlyw.mongodb.net/?retryWrites=true&w=majority&appName=metis-nopaper-gateway-cluster0
spring.data.mongodb.database=gateway


# ## PostgreSQL
# spring.sql.host=ep-long-tooth-a1awtc33-pooler.ap-southeast-1.aws.neon.tech
# spring.sql.database=metis
# spring.sql.port=5432

# Spring Datasource (R2DBC)
# spring.r2dbc.url=r2dbc:postgresql:/${spring.sql.host}:${spring.sql.port}/${spring.sql.database}
# spring.r2dbc.username=metis_owner
# spring.r2dbc.password=npg_Jb1MVzHtu8Oj

# Initialize the database schema on startup
# spring.sql.init.mode=always

# Logging
# logging.level.org.springframework.r2dbc=DEBUG


# spring.jpa.database=POSTGRESQL
# spring.sql.init.platform=postgres
# spring.datasource.url=jdbc:postgresql://${spring.sql.host}:${spring.sql.port}/${spring.sql.database}

# spring.datasource.username=metis_owner
# spring.datasource.password=npg_Jb1MVzHtu8Oj

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.show-sql=true
# spring.jpa.generate-ddl=true
# spring.jpa.properties.hibernate.format_sql=true

# Hibernate ddl auto (create, create-drop, validate, update)
## create OR create-drop options. drop table again, good for testing, comment this in production
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# spring.jpa.properties.hibernate.default_schema=npw

## To generate the database schema, we'll need to pass the schema generation properties to the persistence provider in use.
## To do this, we'll set the native JPA properties in our configuration file under the spring.jpa.properties prefix
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=${spring.application.name}-create.sql
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata

## default connection pool
# spring.datasource.hikari.connectionTimeout=200000
# spring.datasource.hikari.maximumPoolSize=50
## maximum number of milliseconds that a client will wait for a connection
## spring.datasource.hikari.connection-timeout = 20000

## minimum number of idle connections maintained by HikariCP in a connection pool 
## spring.datasource.hikari.minimum-idle= 10

## maximum pool size
## spring.datasource.hikari.maximum-pool-size= 10

## maximum idle time for connection
## spring.datasource.hikari.idle-timeout=10000

## maximum lifetime in milliseconds of a connection in the pool after it is closed.
## spring.datasource.hikari.max-lifetime= 1000

## default auto-commit behavior.
## spring.datasource.hikari.auto-commit =true

## ZIPKIN
management.tracing.sampling.probability=1.0

## SPRING CLOUD GATEWAY
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true

## NOT REQUIRED - CONFIG is being referred from Eureka 
## spring.cloud.gateway.routes[0].id=master
## spring.cloud.gateway.routes[0].uri=lb://master
## spring.cloud.gateway.routes[0].predicates[0].name=Path
## spring.cloud.gateway.routes[0].predicates[0].args[pattern]=/master/**
## spring.cloud.gateway.routes[0].predicates[0].filters=SecurityFilter

## spring.cloud.gateway.routes[1].id=security
## spring.cloud.gateway.routes[1].uri=lb://security
## spring.cloud.gateway.routes[1].predicates[0].name=Path
## spring.cloud.gateway.routes[1].predicates[0].args[pattern]=/security/**
## spring.cloud.gateway.routes[0].predicates[0].filters=SecurityFilter
