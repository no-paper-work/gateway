spring.application.name=gateway
spring.profiles.active=default

gateway.msg=API Gateway - MicroService for ShareHelpers
gateway.build-version=v1

# Server Port
server.port=8080


# Spring Cloud Gateway
spring.cloud.gateway.discovery.locator.enabled=false
spring.cloud.gateway.discovery.locator.lower-case-service-id=true


## TOGGLE FOR ENABLING REDIS - (When set to false, Spring Boot will not automatically scan for and create 
## implementations for interfaces extending RedisRepository or other Spring Data Redis repository marker interfaces.)
spring.data.redis.repositories.enabled=true

# Redis Configuration for Rate Limiter and Cache)
spring.data.redis.host=redis-13492.c264.ap-south-1-1.ec2.redns.redis-cloud.com
# localhost
spring.data.redis.port=13492
# 6379

## --- Caching Configuration ---
## Set the cache type to redis to enable distributed caching.
spring.cache.type=redis

# Optional: Set a password if your Redis server requires authentication
spring.data.redis.username=default
spring.redis.password=9QGCGzgytadc5cGC1pzNhZVyT0af29ec

# Optional: Configure Redis database index (default is 0)
spring.redis.database=0

# Optional: Configure cache-specific properties for Redis
# spring.cache.redis.time-to-live=60000
# Cache entries expire after 60 seconds (in milliseconds)

# spring.cache.redis.cache-null-values=true # Allow caching of null values
spring.cache.redis.key-prefix=gateway: 
# Prefix for cache keys


## Caching configuration using Caffeine // REDIS
# spring.cache.cache-names=routes
# spring.cache.caffeine.spec=expireAfterWrite=5m,maximumSize=100


# Actuator for monitoring
management.endpoints.web.exposure.include=gateway,health,info,prometheus,metrics,refresh
management.endpoint.health.show-details=always
management.health.db.enabled=true
management.health.redis.enabled=true


## SPRING CLOUD GATEWAY
# spring.cloud.gateway.server.webflux.discovery.locator.enabled=true
# spring.cloud.gateway.server.webflux.discovery.locator.lower-case-service-id=true

gateway.security.ip-blacklist=192.168.1.100,10.0.0.5
gateway.auth.service-url=http://localhost:8082/api/auth/validate

## Open-Telemetry
management.otlp.tracing.endpoint=http://localhost:4318/v1/traces

# ## PostgreSQL
# spring.sql.host=ep-bold-bar-a1l33ibu-pooler.ap-southeast-1.aws.neon.tech
# spring.sql.database=metis
# spring.sql.port=5432
# spring.r2dbc.url=r2dbc:postgresql://${spring.sql.host}:${spring.sql.port}/${spring.sql.database}


# R2DBC Database Configuration
spring.r2dbc.url=r2dbc:postgresql://ep-bold-bar-a1l33ibu-pooler.ap-southeast-1.aws.neon.tech/metis?sslmode=require
spring.r2dbc.username=metis_owner
spring.r2dbc.password=npg_Jb1MVzHtu8Oj
spring.r2dbc.pool.enabled=true	


## EUREKA
eureka.instance.prefer-ip-address = true 
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/service-registry/eureka/


# psql 'postgresql://metis_owner:npg_Jb1MVzHtu8Oj@ep-long-tooth-a1awtc33-pooler.ap-southeast-1.aws.neon.tech/metis?sslmode=require&channel_binding=require'
# jdbc:postgresql://ep-bold-bar-a1l33ibu-pooler.ap-southeast-1.aws.neon.tech/metis?user=metis_owner&password=npg_Jb1MVzHtu8Oj&sslmode=require&channelBinding=require

# REPLACED with CODE
# spring:
#  cloud:
#    gateway:
#      routes:
#        - id: order-service ### Unique id of the route. This must be unique
#          uri: http://localhost:8081 ### Target microservice URI
#          predicates: ### condition that you want to check before routing to the given URI.
#            - Path=/orders/** ### Path predicate for URI path matching
